language: minimal
dist: xenial # TODO: replace to bionic when fix https://github.com/travis-ci/travis-ci/issues/9460

git:
  depth: 50
  submodules: false

mysql:
  database: gamedevby
  username: root
  encoding: utf8

cache:
  directories:
    - $HOME/.cache/composer/files
    - $HOME/.composer/cache/files
    - $HOME/.cache/phan-ast/build
    - $HOME/.npm
    - $HOME/apt-cache

before_install:
  - pwd

  # Remove mysql
  - sudo apt-get purge -y mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-*
  - sudo rm -rf /etc/mysql /var/lib/mysql

  # Loading apt cache
  - export APT_CACHE_DIR="$HOME/apt-cache"
  - ls -la $APT_CACHE_DIR
  - |
    for i in $APT_CACHE_DIR/*.deb; do
      if [ -f "$i" ]; then cp -v -p $APT_CACHE_DIR/*.deb /var/cache/apt/archives/; fi
    done

  # Update system
  - sudo LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php -y
  - sudo apt-get update -y
  - sudo apt-get upgrade -y
  - sudo apt-get autoremove -y
  - sudo apt-get autoclean -y

  # TODO: replace to docker container
  # Install Percona Server
  #   https://www.percona.com/doc/percona-server/8.0/installation/apt_repo.html
  #   https://www.percona.com/doc/percona-server/8.0/myrocks/install.html
  # Fetch the repository packages from Percona web
  - wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb
  # Install the downloaded package with dpkg. To do that, run the following commands as root or with sudo
  - sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb
  # Enable the repository
  - sudo percona-release setup ps80
  # Install the server package
  - sudo apt-get install -y percona-server-rocksdb
  # View *.cnf
  - cat /etc/mysql/conf.d/mysql.cnf
  - cat /etc/mysql/mysql.conf.d/mysqld.cnf
  # Starting the service
  - sudo service mysql start
  # Percona Server is distributed with several useful UDF (User Defined Function) from Percona Toolkit.
  #   See http://www.percona.com/doc/percona-server/8.0/management/udf_percona_toolkit.html for more details
  - sudo mysql -e "CREATE FUNCTION fnv1a_64 RETURNS INTEGER SONAME 'libfnv1a_udf.so'"
  - sudo mysql -e "CREATE FUNCTION fnv_64 RETURNS INTEGER SONAME 'libfnv_udf.so'"
  - sudo mysql -e "CREATE FUNCTION murmur_hash RETURNS INTEGER SONAME 'libmurmur_udf.so'"
  # Enable the RocksDB storage engine in Percona Server
  - sudo ps-admin --enable-rocksdb -u root
  # View result
  - sudo mysql -e "SHOW ENGINES"
  - sudo mysql -e "SHOW VARIABLES"
  # Create database
  - sudo mysql -e "CREATE DATABASE gamedevby"
  # Create user
  - sudo mysql -e "CREATE USER 'gamedevby'@'localhost' IDENTIFIED BY 'gamedevby'"
  - sudo mysql -e "GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES ON gamedevby.* TO 'gamedevby'@'localhost'"
  - sudo mysql -e "FLUSH PRIVILEGES"

  # Install php 7.3
  - sudo apt-get install -y php7.3 php7.3-common php7.3-cli
  - sudo apt-get install -y php7.3-curl php7.3-gd php7.3-intl php7.3-mbstring php7.3-xml php7.3-zip php7.3-sqlite3 php7.3-mysql php-xdebug php7.3-soap
  # TODO update ICU and php-intl
  # View php info
  - sudo php -i

  # Install composer
  - curl --silent -o composer-setup.php https://getcomposer.org/installer
  - sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
  - composer diagnose --no-interaction --ansi --verbose
  - sudo mkdir -p ~/.composer/
  - sudo chown -R $USER ~/.composer/
  - composer --no-progress --no-interaction --no-ansi global require hirak/prestissimo

  # Install symfony cli https://symfony.com/download
  - curl --silent https://get.symfony.com/cli/installer | sudo bash
  - sudo mv ~/.symfony/bin/symfony /usr/local/bin/symfony
  - sudo symfony -V

  # Updating apt cache
  - echo "Start updating apt cache"
  - rm -rf $APT_CACHE_DIR/*.deb
  - cp -v -p /var/cache/apt/archives/*deb $APT_CACHE_DIR

install:
  # Validation
  - composer validate --strict --no-interaction --ansi --verbose
  - sudo symfony security:check

  # Install Composer dependencies
  - composer --verbose --prefer-dist --no-progress --no-interaction --ansi --classmap-authoritative install
  - composer licenses --no-interaction --ansi --verbose

  # Export environment settings
  - ./init_env
  - cat ./init_env
  - echo $PATH

  # Check npm
  #- sudo npm audit

  # Check code style
  #- sudo composer drupal:check --no-interaction --ansi --verbose

  # Define build properties for the local test environment
  # - echo -e "drupal.base_url = http://localhost:8888\n" > build.properties.local

  # Create development environment
  # - ./vendor/bin/phing -diagnostics
  # - ./vendor/bin/phing -verbose create-dev-env

  # Install site
  # - ./vendor/bin/phing install-dev

  # Start a web server on port 8888 in the background.
  #- cd $TRAVIS_BUILD_DIR/web
  #- nohup php -S localhost:8888 > /dev/null 2>&1 &

  # Wait until the web server is responding.
  # - until curl -s localhost:8888; do true; done > /dev/null
  #  - cd $TRAVIS_BUILD_DIR

  # Run test
#  - ./vendor/bin/phpunit

#  - cd $TRAVIS_BUILD_DIR/tests
#  - ./behat

#   - ./../vendor/bin/drush site-install --verbose --yes --db-url=sqlite://tmp/site.sqlite
#   - ./../vendor/bin/drush runserver $SIMPLETEST_BASE_URL &
#   - until curl -s $SIMPLETEST_BASE_URL; do true; done > /dev/null
#   # Skip core/tests/Drupal/Tests/ComposerIntegrationTest.php because web/ has no composer.json
#   # Ignore PageCache group temporarily, @see https://www.drupal.org/node/2770673
#   # Ignore Setup group temporarily, @see https://www.drupal.org/node/2962157
#   - ./../vendor/bin/phpunit -c core --testsuite unit --exclude-group Composer,DependencyInjection,PageCache,Setup
#   - ./../vendor/bin/drush
#   - if [[ $RELEASE = stable ]]; then ./../vendor/bin/drupal; fi;

script:
  - echo "All done"
